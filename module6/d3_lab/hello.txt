d3.csv('https://raw.githubusercontent.com/Luz917/data608/master/ue_industry.csv', data => {

    // Define your scales and generator here.

    const xScale = d3.scaleLinear()
        .domain(d3.extent(data, d => +d.index))
        .range([20, 1180]);

    const yScale = d3.scaleLinear()
        .domain(d3.extent(data, d => +d.Agriculture))
        .range([580, 20]);

    let line_ans = d3.line()
        .x(d => xScale(d.index))
        .y(d => yScale(d.Agriculture))

    d3.select('#answer1')
        // append more elements here
        .append('path')
        .attr('stroke', 'black')
        .attr('stroke-width', '1px')
        .attr('d', line_ans(data))


});

        d3.csv('https://raw.githubusercontent.com/Luz917/data608/master/ue_industry.csv', data => {

            const industries = ['Agriculture','Business services','Construction','Education and Health',
                'Finance','Government','Information','Leisure and hospitality','Manufacturing',
                'Mining and Extraction','Other','Self-employed','Transportation and Utilities',
                'Wholesale and Retail Trade'];
        
            const colors = ['#40655e', '#93e6b7', '#06a56c', '#1cf1a3', '#1a4fa3', '#8b83f2', '#3fc6f8', 
                '#682dbd', '#f642d0', '#e4ccf1', '#801967', '#bc7da3', '#613b4f', '#88cc1f'];
        
            const totalYmax = d3.max(
                industries.map(
                    d => d3.max(data, e => +e[d])
                )
            );
        
            const xScale = d3.scaleLinear()
                .domain(d3.extent(data, d => +d.index))
                .range([20, 1180]);
            
            const yScale = d3.scaleLinear()
                .domain([0, totalYmax])
                .range([580, 20]);
        
            const fillScale = d3.scaleOrdinal()
                .domain(industries)
                .range(colors);
        
            Object.keys(data[0]).forEach(key => {
                if (key != 'index') {
                    
                    var line = d3.line()
                        .x(d => xScale(+d.index))
                        .y(d => yScale(+d[key]))
                        .curve(d3.curveCardinal);
                    
                    d3.select('#part5')
                        .append('path')
                        .attr('d', line(data))
                        .attr('stroke', fillScale(key))
        
                }
        
            });
        
        }); 
      

d3.csv('https://raw.githubusercontent.com/Luz917/data608/master/ue_industry.csv', data => {

            const industries = ['Agriculture','Business services','Construction','Education and Health',
                'Finance','Government','Information','Leisure and hospitality','Manufacturing',
                'Mining and Extraction','Other','Self-employed','Transportation and Utilities',
                'Wholesale and Retail Trade'];
        
            const colors = ['#393b79', '#5253a3', '#6b6ecf', '#9c9ede', '#637939', '#8ca252', '#b5cf6b', 
                '#cedb9c', '#8b6d31', '#bd9e38', '#e7ba52', '#e7cb93', '#843c39', '#ad494a'];
        
            const totalYmax = d3.sum(
                industries.map(
                    d => d3.max(data, e => +e[d])
                )
            );
        
            const xScale = d3.scaleLinear()
                .domain(d3.extent(data, d => +d.index))
                .range([20, 1180]);
            
            const yScale = d3.scaleLinear()
                .domain([0, totalYmax])
                .range([580, 20]);
        
            const fillScale = d3.scaleOrdinal()
                .domain(industries)
                .range(colors);
        
            const stackLayout = d3.stack()
                .keys(industries);
                
            const stackArea = d3.area()
                .x((d, i) => xScale(i))
                .y0(d => yScale(d[0]))
                .y1(d => yScale(d[1]));
        
            d3.select('#part6')
                .selectAll('path')
                .data(stackLayout(data))
                .enter().append('path')
                .attr('d', d => stackArea(d))
                .style('fill', d => fillScale(d.key))
        
        });

